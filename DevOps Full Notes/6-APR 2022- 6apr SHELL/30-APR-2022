What are function arguments,what is the purpose of them?
we can reuse the function at various different places within our shellprogram and can call it with different values as an input.
	
program.sh
---------------
#!/bin/bash
function f1() {
	A=$1 #read the arguments inside the function using implicit variables
	B=$2
}	

#main block
f1 10 20 #pass the arguments while calling the function
--------------------------------------------------------------------------------------------
Variable scopes
There are 2 scopes of variables are there in a shellprogram
1. global scope
2. local scope

#1. global scope
The variables we declare within a shellprogram are by default global scope, which means those variables are accessible within the entire shellprogram 


#2. local variables
When we create a variable inside the function by default it is scoped to the global and becomes accessible within the entire program.
if we want the variable to be scoped only to the function scope then we need to use local keyword in declaring local variable

local variableName=value
The above variable will be accessible within the function only.
Note:- we cannot declare local variables within the main block of the program, we can declare local variables only inside the functions
--------------------------------------------------------------------------------------------
Working with function return values
-----------------------------------
The functions are reusable block of code that can be executed at various different places within our shellprogram. Always functions are called by passing arguments as an input to perform operations with different set of values.
upon function performing the operation, the output of the execution has to be returned as an input to the callee, so that the output can be used by the callee in performing further operation.
This can be done by returning the output generated by the function to the callee

In shellscripting functions cannot return the returnValue, there is a return statement in shellscripting available which can be used inside the function
but the return statement is used for returning the status (exitcode) of the execution of the function. A return value of 0 indicates successful completion of the function and a non-zero value indicates failure in executing the function

This exitcode can be collected in the callee (main-block) using $?
To collect the output of the function in shellscripting we need to rely on Global Variables only.
	

shellprogram
-------------
SUM=0
	
#!/bin/bash
function add() {
	NARGS=$#
	if [ $NARGS -ne 2 ]
	then
		return 100
	fi
	
	A=$1
	B=$2
	SUM=$[A+B]
	return 0
}

#main block
add 10 20
STATUS=$?
if [ $STATUS -eq 0 ]	
then
	echo "SUM : $SUM"
elif [ $STATUS -eq 100 ]
then
	echo "error! arguments are missing"
	exit 1
fi
















































